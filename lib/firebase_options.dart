// File generated by FlutterFire CLI.
// ignore_for_file: type=lint

import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```

class DefaultFirebaseOptions {
  static FirebaseOptions? _firebaseOptions;

  static Future<void> loadFirebaseConfig() async {
    final String endpoint =
    dotenv.env['ENDPOINT']!;

    try {
      final response = await http.get(Uri.parse(endpoint));

      if (response.statusCode == 200) {
        print("Firebase step 1 config loaded successfully");
        final firebaseConfig = jsonDecode(response.body);
        _firebaseOptions = _getPlatformSpecificOptions(firebaseConfig);
        print('Firebase step 2 config loaded successfully');
      } else {
        print("Error: ${response.statusCode}");
        throw Exception('Failed to load Firebase config, status: ${response.statusCode}');
      }
    } catch (e) {
      print("Error step 1 loading Firebase config: $e");
      throw Exception('Error step 2 loading Firebase config: $e');
    }
  }

  static FirebaseOptions get currentPlatform {
    if (_firebaseOptions == null) {
      throw Exception('Firebase configuration not loaded');
    }
    return _firebaseOptions!;
  }

  static FirebaseOptions _getPlatformSpecificOptions(Map<String, dynamic> firebaseConfig) {
    if (kIsWeb) {
      return _getWebOptions(firebaseConfig);
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return _getAndroidOptions(firebaseConfig);
      case TargetPlatform.iOS:
        return _getIosOptions(firebaseConfig);
      case TargetPlatform.macOS:
        return _getIosOptions(firebaseConfig);
      case TargetPlatform.windows:
        return _getWebOptions(firebaseConfig);
      case TargetPlatform.linux:
        throw UnsupportedError('Linux is not supported.');
      default:
        throw UnsupportedError('Platform not supported.');
    }
  }

  static FirebaseOptions _getWebOptions(Map<String, dynamic> firebaseConfig) {
    return FirebaseOptions(
      apiKey: firebaseConfig['webApiKey'],
      appId: firebaseConfig['appId']['web'],
      messagingSenderId: firebaseConfig['messagingSenderId'],
      projectId: firebaseConfig['projectId'],
      authDomain: firebaseConfig['authDomain'],
      storageBucket: firebaseConfig['storageBucket'],
      measurementId: firebaseConfig['measurementId'],
    );
  }

  static FirebaseOptions _getAndroidOptions(Map<String, dynamic> firebaseConfig) {
    return FirebaseOptions(
      apiKey: firebaseConfig['androidApiKey'],
      appId: firebaseConfig['appId']['android'],
      messagingSenderId: firebaseConfig['messagingSenderId'],
      projectId: firebaseConfig['projectId'],
      storageBucket: firebaseConfig['storageBucket'],
    );
  }

  static FirebaseOptions _getIosOptions(Map<String, dynamic> firebaseConfig) {
    return FirebaseOptions(
      apiKey: firebaseConfig['iosApiKey'],
      appId: firebaseConfig['appId']['ios'],
      messagingSenderId: firebaseConfig['messagingSenderId'],
      projectId: firebaseConfig['projectId'],
      storageBucket: firebaseConfig['storageBucket'],
      iosBundleId: firebaseConfig['iosBundleId'],
    );
  }
}


// class DefaultFirebaseOptions {
//   static FirebaseOptions get currentPlatform {
//     if (kIsWeb) {
//       return web;
//     }
//     switch (defaultTargetPlatform) {
//       case TargetPlatform.android:
//         return android;
//       case TargetPlatform.iOS:
//         return ios;
//       case TargetPlatform.macOS:
//         return macos;
//       case TargetPlatform.windows:
//         return windows;
//       case TargetPlatform.linux:
//         throw UnsupportedError(
//           'DefaultFirebaseOptions have not been configured for linux - '
//           'you can reconfigure this by running the FlutterFire CLI again.',
//         );
//       default:
//         throw UnsupportedError(
//           'DefaultFirebaseOptions are not supported for this platform.',
//         );
//     }
//   }
//
//   static FirebaseOptions get web => FirebaseOptions(
//     apiKey: dotenv.env['WEB_API_KEY']!,
//     appId: dotenv.env['WEB_APP_ID']!,
//     messagingSenderId: dotenv.env['MESSAGING_SENDER_ID']!,
//     projectId: dotenv.env['PROJECT_ID']!,
//     authDomain: dotenv.env['AUTH_DOMAIN']!,
//     storageBucket: dotenv.env['STORAGE_BUCKET']!,
//     measurementId: dotenv.env['MEASUREMENT_ID']!,
//   );
//
//   static FirebaseOptions get android => FirebaseOptions(
//     apiKey: dotenv.env['ANDROID_API_KEY']!,
//     appId: dotenv.env['ANDROID_APP_ID']!,
//     messagingSenderId: dotenv.env['MESSAGING_SENDER_ID']!,
//     projectId: dotenv.env['PROJECT_ID']!,
//     storageBucket: dotenv.env['STORAGE_BUCKET']!,
//   );
//
//   static FirebaseOptions get ios => FirebaseOptions(
//     apiKey: dotenv.env['IOS_API_KEY']!,
//     appId: dotenv.env['IOS_APP_ID']!,
//     messagingSenderId: dotenv.env['MESSAGING_SENDER_ID']!,
//     projectId: dotenv.env['PROJECT_ID']!,
//     storageBucket: dotenv.env['STORAGE_BUCKET']!,
//     iosBundleId: dotenv.env['IOS_BUNDLE_ID']!,
//   );
//
//   static FirebaseOptions get macos => ios;
//
//   static FirebaseOptions get windows => web;
// }